{
  "author": {
    "name": "Talha Asad",
    "email": "talha@mindblaze.net",
    "url": "http://mindblaze.net"
  },
  "name": "streaming-s3",
  "description": "Streaming uploads to Amazon Web Service (AWS) S3 for NodeJS",
  "version": "0.3.2",
  "keywords": [
    "aws s3",
    "aws s3 streaming",
    "aws s3 streaming upload",
    "aws-sdk s3 streaming upload",
    "aws s3 upload",
    "s3 upload",
    "s3 stream upload",
    "s3 streaming",
    "streaming upload",
    "s3 streaming upload"
  ],
  "homepage": "http://mindblaze.github.io/streaming-s3",
  "repository": {
    "type": "git",
    "url": "git://github.com/mindblaze/streaming-s3.git"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "aws-sdk": "1.18.0",
    "async": "0.9.0"
  },
  "readme": "# Streaming-S3\n\n[![Build Status](https://travis-ci.org/mindblaze/streaming-s3.png?branch=master)](https://travis-ci.org/mindblaze/streaming-s3)\n[![Dependency Status](https://www.versioneye.com/user/projects/5323a411ec13758e7d000109/badge.png)](https://www.versioneye.com/user/projects/5323a411ec13758e7d000109)\n[![NPM version](https://badge.fury.io/js/streaming-s3.png)](http://badge.fury.io/js/streaming-s3)\n\n[![NPM stats](https://nodei.co/npm/streaming-s3.png?downloads=true)](https://www.npmjs.org/package/streaming-s3)\n\nA simple and light-weight S3 upload streaming module for NodeJS.\n\n\n## Benefits & Features\n* Super fast and super easy to use\n* Low memory usage\n* Nothing is written to disk during upload\n* Parallel part uploading\n* No need to know total size of the object\n* Implicit retry mechanism for failed part uploads\n* Tons of configurable options\n* Simple interface (Asynchronous and evented)\n* Downloading and uploading statistics (U/D speed and U/D time)\n* Proper usage of streams and graceful error handling\n* Production ready (Used and tested on production environments, uploading gigabytes of files to S3)\n* Uses official AWS SDK\n\n\n## Installation\n\n```\n$ npm install streaming-s3\n```\n\n\n## Example Usage\n\n\n### Example 1: Uploading local file with callback.\n\n```js\nvar Streaming-S3 = require('streaming-s3'),\n    fs = require('fs');\n\nvar fStream = fs.CreateReadStream(__dirname + '/video.mp4');\nvar uploader = new Streaming-S3(fStream, 'accessKey', 'secretKey',\n  {\n    Bucket: 'example.streaming-s3.com',\n    Key: 'video.mp4',\n    ContentType: 'video/mp4'\n  },  function (err, resp, stats) {\n  if (err) return console.log('Upload error: ', e);\n  console.log('Upload stats: ', stats);\n  console.log('Upload successful: ', resp);\n  }\n);\n```\n\n### Example 2: Uploading local file without callback.\n\n```js\nvar Streaming-S3 = require('streaming-s3'),\n    fs = require('fs');\n\nvar fStream = fs.CreateReadStream(__dirname + '/video.mp4');\nvar uploader = new Streaming-S3(fStream, 'accessKey', 'secretKey',\n  {\n    Bucket: 'example.streaming-s3.com',\n    Key: 'video.mp4',\n    ContentType: 'video/mp4'\n  }\n);\n  \nuploader.begin(); // important if callback not provided.\n\nuploader.on('data', function (bytesRead) {\n  console.log(bytesRead, ' bytes read.');\n});\n\nuploader.on('part', function (number) {\n  console.log('Part ', number, ' uploaded.');\n});\n\n// All parts uploaded, but upload not yet acknowledged.\nuploader.on('uploaded', function (stats) {\n  console.log('Upload stats: ', stats);\n});\n\nuploader.on('finished', function (resp, stats) {\n  console.log('Upload finished: ', resp);\n});\n\nuploader.on('error', function (e) {\n  console.log('Upload error: ', e);\n});\n```\n\n\n### Example 3: Uploading remote file without callback and options\n\n```js\nvar Streaming-S3 = require('streaming-s3'),\n    request = require('request');\n\nvar rStream = request.get('http://www.google.com');\nvar uploader = new Streaming-S3(rStream, 'accessKey', 'secretKey',\n  {\n    Bucket: 'example.streaming-s3.com',\n    Key: 'google.html',\n    ContentType: 'text/html'\n  },\n  {\n    concurrentParts: 2,\n    waitTime: 10000,\n    retries: 1,\n    maxPartSize: 10*1024*1024,\n  }\n);\n  \nuploader.begin(); // important if callback not provided.\n\nuploader.on('data', function (bytesRead) {\n  console.log(bytesRead, ' bytes read.');\n});\n\nuploader.on('part', function (number) {\n  console.log('Part ', number, ' uploaded.');\n});\n\n// All parts uploaded, but upload not yet acknowledged.\nuploader.on('uploaded', function (stats) {\n  console.log('Upload stats: ', stats);\n});\n\nuploader.on('finished', function (resp, stats) {\n  console.log('Upload finished: ', resp);\n});\n\nuploader.on('error', function (e) {\n  console.log('Upload error: ', e);\n});\n```\n\n## Defaults and Configurables\n\n* **concurrentParts** (Default: 5) - Parts that are uploaded simultaneously.\n* **waitTime** (Default: 1 min (60000 ms)) - Time to wait for verification from S3 after uploading parts.\n* **retries** (Default: 5) - Number of times to retry uploading a part, before failing.\n* **maxPartSize** (Default: 5 MB) - Maximum size of each part.\n\n\n## Statistics object\n\n* **downloadTime** - Download time in seconds. (Reading from stream)\n* **downloadSpeed** - Download speed in bytes/second.\n* **uploadTime** - Upload time in seconds.\n* **uploadSpeed** - Upload speed in bytes/second. (Streaming to S3)\n* **size** - Total bytes uploaded.\n\n\n## History\n\n* v0.3.2 (2014-06-01) -- Fixed Readme and version bump, to remove confusion.\n* v0.3.1-1 (2014-06-01) -- Updated dependencies.\n* v0.3.1 (2014-06-01) -- Fixed stats object.\n* v0.3.0 (2014-05-08) -- Downgraded AWS SDK to stable version (1.18)\n* v0.2.9 (2014-05-07) -- some minor improvements.\n* v0.2.8 (2014-04-07) -- added size property to stats object.\n* v0.2.7 (2014-03-27) -- Critical interval issues addressed.\n* v0.2.6 (2014-03-27) -- Various minor improvements.\n* v0.2.4 (2014-03-26) -- Various minor improvements.\n* v0.2.3 (2014-03-24) -- Options overwriting bug resolved.\n* v0.2.2 (2014-03-24) -- Added some useful keywords to the package.\n* v0.2.1 (2014-03-24) -- Prevent callback being fired twice in case of failure.\n* v0.2.0 (2014-03-22) -- Updated dependencies.\n* v0.1.9 (2014-03-21) -- acknowledgement logic improved.\n* v0.1.8 (2014-03-21) -- Closes #1 and lots of fixes.\n* v0.1.7 (2014-03-15) -- Initial release.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Talha Asad\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/mindblaze/streaming-s3/issues"
  },
  "_id": "streaming-s3@0.3.2",
  "dist": {
    "shasum": "959033f033470bda7094907e8ce034f8d133aa2f"
  },
  "_from": "streaming-s3@0.3.2",
  "_resolved": "https://registry.npmjs.org/streaming-s3/-/streaming-s3-0.3.2.tgz"
}
